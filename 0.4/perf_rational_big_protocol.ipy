from abc import abstractproperty
from fractions import Fraction
from typing import (
  Any,
  Protocol,
  SupportsAbs,
  SupportsComplex,
  SupportsFloat,
  SupportsRound,
  runtime_checkable,
)
from numerary.types import (  # "raw" (non-caching) versions
  _SupportsComplexOps,
  _SupportsConjugate,
  _SupportsDivmod,
  _SupportsFloorCeil,
  _SupportsRealImag,
  _SupportsRealOps,
  _SupportsTrunc,
)

one_int = 1
two_frac = Fraction(2)
three_float = 3.0
vals = (one_int, two_frac, three_float)

@runtime_checkable
class SupportsLotsOfNumberStuff(
  _SupportsRealOps,
  _SupportsComplexOps,
  _SupportsDivmod,
  _SupportsTrunc,
  _SupportsFloorCeil,
  _SupportsConjugate,
  _SupportsRealImag,
  SupportsAbs,
  SupportsFloat,
  SupportsComplex,
  SupportsRound,
  Protocol,
):
  __slots__: Any = ()
  @abstractproperty
  def numerator(self) -> int:
    pass
  @abstractproperty
  def denominator(self) -> int:
    pass

for v in vals:
  print(f"%timeit isinstance({v!r}, SupportsLotsOfNumberStuff)")
  %timeit isinstance(v, SupportsLotsOfNumberStuff)
